type Punk @entity {
  id: ID!
  owner: Account!
  totalOwners: BigInt!
  highestPrice: BigInt!
  highestBid: BigInt! 
  hasBid: Boolean!
  forSale: Boolean!
  sales: [PunkBought]! @derivedFrom(field: "punkIndex")
  offered: [PunkOffered]! @derivedFrom(field: "punkIndex")
  removedFromSale: [PunkNoLongerForSale]! @derivedFrom(field: "punkIndex")
  transfers: [PunkTransfer]! @derivedFrom(field: "punkIndex")
  bids: [PunkBidEntered]! @derivedFrom(field: "punkIndex")
  failedBids: [PunkBidWithdrawn]! @derivedFrom(field: "punkIndex")
  events: [Event]! @derivedFrom(field: "punkIndex")
  assigned: [Assign]! @derivedFrom(field: "punkIndex") 
}

type Account @entity {
  id: ID! 
  totalSpentBuyingPunks: BigInt!
  totalEarnedSellingPunks: BigInt!
  totalPunks: BigInt!
  totalOffered: BigInt!
  interactionCount: BigInt!
  highestBid: BigInt! 
  openBidCount: BigInt!
  highestPricePaid: BigInt!
  transactions: [Transaction]! @derivedFrom(field: "from")
  punks: [Punk]! @derivedFrom(field: "owner")
  sales: [PunkBought]! @derivedFrom(field: "from")
  purchases: [PunkBought]! @derivedFrom(field: "to")
  bids: [PunkBidEntered]! @derivedFrom(field: "bidder")
  withdrawnBids: [PunkBidWithdrawn]! @derivedFrom(field: "bidder")
  receivedPunks: [PunkTransfer]! @derivedFrom(field: "to")
  sentPunks: [PunkTransfer]! @derivedFrom(field: "from")
  assigned: [Assign]! @derivedFrom(field: "to")
}

type Transaction @entity {
  id: ID!
  from: Account
  to: Account
  value: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
}

# Thanks Hadrien @amxx for the design idea
interface Event {
  id: ID!
  transaction: Transaction!
  punkIndex: Punk!
}

type Assign implements Event @entity {
  id: ID!
  transaction: Transaction!
  to: Account!
  punkIndex: Punk!
}

type PunkTransfer implements Event @entity {
  id: ID!
  transaction: Transaction!
  from: Account!
  to: Account!
  punkIndex: Punk!
}

type PunkOffered implements Event @entity {
  id: ID!
  transaction: Transaction!
  punkIndex: Punk!
  minValue: BigInt!
  toAddress: Account
}

type PunkBidEntered implements Event @entity {
  id: ID!
  transaction: Transaction!
  punkIndex: Punk!
  value: BigInt!
  bidder: Account!
}

type PunkBidWithdrawn implements Event @entity {
  id: ID!
  transaction: Transaction!
  punkIndex: Punk!
  value: BigInt!
  bidder: Account!
}

type PunkBought implements Event @entity {
  id: ID!
  transaction: Transaction!
  punkIndex: Punk!
  value: BigInt!
  from: Account!
  to: Account!
}

type PunkNoLongerForSale implements Event @entity {
  id: ID!
  transaction: Transaction!
  punkIndex: Punk!
}
